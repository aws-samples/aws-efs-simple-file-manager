# Serverless Limit Monitor Solution
#
# template for serverless-limit-monitor-solution
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0668) - Solution - Master Template

Parameters:
  AdminEmail:
    Description: Email address of the Simple File Manager Administrator
    Type: String

Mappings:
  SourceCode:
    General:
      GlobalS3Bucket: "%%GLOBAL_BUCKET_NAME%%"
      RegionalS3Bucket: "%%REGIONAL_BUCKET_NAME%%"
      CodeKeyPrefix: "efs_file_manager/%%VERSION%%"
      TemplateKeyPrefix: "efs_file_manager/%%VERSION%%"

Resources:
  # File Manager API Handler IAM Role
  # TODO: Scope some of the inline policies down
  EFSFileManagerIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-API-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:CreateFunction"
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunction"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "elasticfilesystem:DescribeMountTargetSecurityGroups"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcs"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "elasticfilesystem:DescribeMountTargets"
                  - "elasticfilesystem:DeleteAccessPoint"
                  - "elasticfilesystem:DescribeFileSystems"
                  - "elasticfilesystem:CreateAccessPoint"
                Resource:
                  - "arn:aws:elasticfilesystem:*:*:file-system/*"
                  - "arn:aws:elasticfilesystem:*:*:access-point/*"
              # TODO: Add iam:passedtoservice condition key
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - "arn:aws:iam::*:role/fs-*"


  # File Manager API stack
  EFSFileManagerAPI:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: 
        !Join [
          "",
          [
            "https://",
            !FindInMap [ "SourceCode", "General", "GlobalS3Bucket" ],
            ".s3.amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/file-manager-api-stack.template",
          ],
        ]
      Parameters:
        ApiHandlerIamRole: !GetAtt EFSFileManagerIamRole.Arn
        botoConfig: '{"user_agent_extra": "AwsSolution/SO0145/%%VERSION%%"}'
        DeploymentPackageBucket: 
          !Join ["-", [!FindInMap ["SourceCode", "General", "RegionalS3Bucket"], Ref: "AWS::Region"]]
        DeploymentPackageKey:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "filemanagerapi.zip",
            ],
          ]

  # Deploy Authentication stack.
  EFSFileAuthentication:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap [ "SourceCode", "General", "GlobalS3Bucket" ],
            ".s3.amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/efs-file-manager-auth.template",
          ],
        ]
      Parameters:
        AdminEmail: !Ref AdminEmail
        ApiId: !GetAtt EFSFileManagerAPI.Outputs.RestAPIId


    # Deploy Web Application stack
  EFSFileWebApplication:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap [ "SourceCode", "General", "GlobalS3Bucket" ],
            ".s3.amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/efs-file-manager-web.template",
          ],
        ]
      Parameters:
        FileManagerAPIEndpoint: !Join [ '', !Split [ '/api/', !GetAtt EFSFileManagerAPI.Outputs.EndpointURL ] ]
        UserPoolId: !GetAtt EFSFileAuthentication.Outputs.UserPoolId
        IdentityPoolId: !GetAtt EFSFileAuthentication.Outputs.IdentityPoolId
        PoolClientId: !GetAtt EFSFileAuthentication.Outputs.UserPoolClientId

Outputs:
  EFSFileSimpleWebsiteUrl:
    Value: !GetAtt EFSFileWebApplication.Outputs.EFSFileSimpleWebsiteUrl


